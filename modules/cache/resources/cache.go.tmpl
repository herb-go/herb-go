package app

import (
	"sync/atomic"

	"github.com/herb-go/datamodules/ncache"

	"github.com/herb-go/herbconfig/source"
	"github.com/herb-go/util"
	"github.com/herb-go/util/config"
	"github.com/herb-go/util/config/tomlconfig"
)

//{{.PascalWithParents}} cache module
var {{.PascalWithParents}} = ncache.NewConfig()

var sync{{.PascalWithParents}} atomic.Value

//Store{{.PascalWithParents}} atomically store cache config
func (a *appSync) Store{{.PascalWithParents}}(c *ncache.Config) {
	sync{{.PascalWithParents}}.Store(c)
}

//Load{{.PascalWithParents}} atomically load cache config
func (a *appSync) Load{{.PascalWithParents}}() *ncache.Config {
	v := sync{{.PascalWithParents}}.Load()
	if v == nil {
		return nil
	}
	return v.(*ncache.Config)
}


func init() {
	config.RegisterLoader(util.ConfigFile("/{{.LowerWithParentDotSeparated}}.toml"), func(configpath source.Source) {
		util.Must(tomlconfig.Load(configpath, {{.PascalWithParents}}))
		Sync.Store{{.PascalWithParents}}({{.PascalWithParents}})
	})
}
