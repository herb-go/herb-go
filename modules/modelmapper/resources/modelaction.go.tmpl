package actions

import (
	"net/http"
    "modules/{{.Module}}/forms"
    "modules/{{.Module}}/models"
    "modules/{{.Module}}/viewmodels"

	"github.com/herb-go/herb/model/formdata"
	"github.com/herb-go/herb/render"
)
{{ if .Confirmed.CreateForm -}}
{{ if .Confirmed.WithCreate -}}
//ActionCreate{{.Name.Pascal}} action which create {{.Name.Raw}} model with Create{{.Name.Pascal}}Form.
func ActionCreate{{.Name.Pascal}}(w http.ResponseWriter, r *http.Request) {
	form := forms.NewCreate{{.Name.Pascal}}Form()
	if formdata.MustValidateJSONRequest(r, form) {
		model ,err:= form.Model()
        if err!=nil{
            panic(err)
        }        
		_ , err=models.{{.Name.Pascal}}.InsertModel(model).Exec()
        if err!=nil{
            panic(err)
        }
		render.MustJSON(w, viewmodels.MustConvert{{.Name.Pascal}}{{.ID.Pascal}}ViewModel(model), 200)
	} else {
		formdata.MustRenderErrorsJSON(w, form)
	}
}
{{- end }}
{{- end -}}

{{ if .Confirmed.CreateViewModel -}}
{{ if .Columns.IsSinglePrimayKey -}}
{{ if .Confirmed.WithRead }}

//ActionGet{{.Name.Pascal}} action which get {{.Name.Raw}} model by primary key in url.
func ActionGet{{.Name.Pascal}}(w http.ResponseWriter, r *http.Request){
    pk:=forms.MustGet{{.Name.Pascal}}PrimaryKeyFormRequest(r)
    {{ if eq .Columns.FirstPrimayKey.ColumnType "int" -}}
    {{ if not .Columns.FirstPrimayKey.NotNull -}}
    if pk==nil{
        {{else -}}
    if pk==0{        
        {{end -}}
        http.Error(w,http.StatusText(404),404)
        return
    } 
    {{- else -}}
    {{ if not .Columns.FirstPrimayKey.NotNull -}}
    if pk==nil{
        {{else -}}
    if pk==""{        
        {{end -}}
        http.Error(w,http.StatusText(404),404)
        return
    }     
    {{- end }}
    model, err := models.{{.Name.Pascal}}.FindByPrimaryKey(pk)
	if err!=nil{
        panic(err)
    }
	if model == nil {
		http.Error(w, http.StatusText(404), 404)
		return
	}
	render.MustJSON(w, viewmodels.MustConvert{{.Name.Pascal}}{{.ID.Pascal}}ViewModel(model), 200)
}
{{- end -}}
{{- end }}
{{- end }}

{{ if .Confirmed.CreateForm -}}
{{ if .Columns.IsSinglePrimayKey -}}
{{ if .Confirmed.WithUpdate -}}

//ActionUpdate{{.Name.Pascal}} action which update  {{.Name.Raw}} model by primary key in url and  FormUpdate{{.Name.Pascal}}.
func ActionUpdate{{.Name.Pascal}}(w http.ResponseWriter, r *http.Request) {
    pk:=forms.MustGet{{.Name.Pascal}}PrimaryKeyFormRequest(r)
    {{if eq .Columns.FirstPrimayKey.ColumnType "int" -}}
    {{ if not .Columns.FirstPrimayKey.NotNull -}}
    if pk==nil{
        {{else -}}
    if pk==0{        
        {{end -}}
        http.Error(w,http.StatusText(404),404)
        return
    } 
    {{- else -}}
    {{ if not .Columns.FirstPrimayKey.NotNull -}}
    if pk==nil{
        {{else -}}
    if pk==""{        
        {{end -}}
        http.Error(w,http.StatusText(404),404)
        return
    }     
    {{- end }}
    model, err := models.{{.Name.Pascal}}.FindByPrimaryKey(pk)
	if err!=nil{
        panic(err)
    }
    if model == nil {
		http.Error(w, http.StatusText(404), 404)
	}
	form := forms.NewUpdate{{.Name.Pascal}}Form()
	if formdata.MustValidateJSONRequest(r, form) {
		 err := form.Apply(model)
         if err!=nil{
             panic(err)
         }
		_ , err = models.{{.Name.Pascal}}.UpdateModel(model).Exec()
        if err!=nil{
            panic(err)
        }
		render.MustJSON(w, model, 200)
	} else {
		formdata.MustRenderErrorsJSON(w, form)
	}
}
{{- end -}}
{{- end -}}
{{- end }}

{{ if .Columns.IsSinglePrimayKey -}}
{{ if .Confirmed.WithDelete -}}

//ActionDelete{{.Name.Pascal}} action which delete {{.Name.Raw}} model by primary key in url.
func ActionDelete{{.Name.Pascal}}(w http.ResponseWriter, r *http.Request) {
    var err error
   pk:=forms.MustGet{{.Name.Pascal}}PrimaryKeyFormRequest(r)
    {{if eq .Columns.FirstPrimayKey.ColumnType "int" -}}
    {{ if not .Columns.FirstPrimayKey.NotNull -}}
    if pk==nil{
        {{else -}}
    if pk==0{        
        {{end -}}
        http.Error(w,http.StatusText(404),404)
        return
    } 
    {{- else -}}
    {{ if not .Columns.FirstPrimayKey.NotNull -}}
    if pk==nil{
        {{else -}}
    if pk==""{
        {{end -}}
        http.Error(w,http.StatusText(404),404)
        return
    }     
    {{- end}}
	model, err := models.{{.Name.Pascal}}.FindByPrimaryKey(pk)
	if err != nil {
		panic(err)
	}
	if model == nil {
		http.Error(w, http.StatusText(404), 404)
	}
	_, err = models.{{.Name.Pascal}}.DeleteModel(model).Exec()
    if err!=nil{
        panic(err)
    }
   	render.MustJSON(w, "ok", 200)
}
{{- end }}
{{- end }}

{{ if .Confirmed.CreateViewModel -}}
{{ if .Confirmed.WithList -}}
//ActionList{{.Name.Pascal}} action which list {{.Name.Raw}} models by request params.
func ActionList{{.Name.Pascal}}(w http.ResponseWriter, r *http.Request) {
       	render.MustJSON(w, mustList{{.Name.Pascal}}Models(r), 200)
}

func mustList{{.Name.Pascal}}Models(r *http.Request) map[string]interface{}{
    p:=forms.MustGet{{.Name.Pascal}}ParamsFromRequest(r)
    modelsSelect:=models.{{.Name.Pascal}}.SelectModel()
    p.ApplyToModelsSelect(modelsSelect)
    modellist,err:=models.{{.Name.Pascal}}.FindAll(modelsSelect)
    if err!=nil{
        panic(err)
    }
    countSelect:=models.{{.Name.Pascal}}.SelectCount()
    p.ApplyToCountSelect(countSelect)
    result,err:=models.{{.Name.Pascal}}.FindCount(countSelect)
    if err!=nil{
        panic(err)
    }
    return map[string]interface{}{
        "Items":viewmodels.MustConvert{{.Name.Pascal}}{{.ID.Pascal}}ViewModelList(modellist),
        "Count":result,
    }
}

{{- end }}
{{- end -}}

