package outputs

import (
    "modules/{{.Module}}/models"
)

//New{{.Name.Pascal}}{{.ID.Pascal}}Output create new {{.Name.Pascal}}{{.ID.Pascal}}Output
func New{{.Name.Pascal}}{{.ID.Pascal}}Output() *{{.Name.Pascal}}{{.ID.Pascal}}Output{
     return &{{.Name.Pascal}}{{.ID.Pascal}}Output{}
}

//{{.Name.Pascal}}{{.ID.Pascal}}Output  {{.Name.Raw }} output struct
type {{.Name.Pascal}}{{.ID.Pascal}}Output struct {
	{{- range .Columns.Columns}}
	{{.Name}} {{if not .NotNull }}*{{end}}{{.ColumnType}}
	{{- end}}
}

//Convert : convert {{.Name.Raw }} model to output.
//Return any error if raised.
func (o *{{.Name.Pascal}}{{.ID.Pascal}}Output) Convert(model *models.{{.Name.Pascal}}Model) error{
    {{- range .Columns.Columns}}
	o.{{.Name}} = model.{{.Name}}
	{{- end}}
    return nil
}

//MustConvert{{.Name.Pascal}}{{.ID.Pascal}}Output  convert  {{.Name.Raw }} model to  output .
//Panic if any error raised.
func MustConvert{{.Name.Pascal}}{{.ID.Pascal}}Output(model *models.{{.Name.Pascal}}Model) *{{.Name.Pascal}}{{.ID.Pascal}}Output{
    output:=New{{.Name.Pascal}}{{.ID.Pascal}}Output()
    err:=output.Convert(model)
    if err!=nil{
        panic(err)
    }
    return output
}


//MustConvert{{.Name.Pascal}}{{.ID.Pascal}}OutputList  convert  {{.Name.Raw }} model list to  {{.Name.Raw }} output list.
//Panic if any error raised.
func MustConvert{{.Name.Pascal}}{{.ID.Pascal}}OutputList(models []*models.{{.Name.Pascal}}Model) []*{{.Name.Pascal}}{{.ID.Pascal}}Output{
    output:=make([]*{{.Name.Pascal}}{{.ID.Pascal}}Output,len(models))
    for k,v:=range models{
        o:=&{{.Name.Pascal}}{{.ID.Pascal}}Output{}
        err:=o.Convert(v)
        if err!=nil{
            panic(err)
        }
        output[k]=o
    }
    return output
}