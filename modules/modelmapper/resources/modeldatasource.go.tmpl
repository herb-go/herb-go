package models

import (
	"github.com/herb-go/herb/cache"
	"github.com/herb-go/herb/cache/datastore"
)

//New{{.Name.Pascal}}ModelLoaderFactory create new {{.Name.Pascal}}ModelLoader factory.
//You should create your loader factory in your model cache module.
var New{{.Name.Pascal}}ModelLoaderFactory = func(c cache.Cacheable) func() *{{.Name.Pascal}}ModelLoader {
	return func() *{{.Name.Pascal}}ModelLoader {
		return &{{.Name.Pascal}}ModelLoader{
			Loader: {{.Name.Pascal}}ModelDataSource.NewSyncMapStoreLoader(c),
		}
	}
}

//{{.Name.Pascal}}ModelLoader {{.Name.Raw}} otuput loader
type {{.Name.Pascal}}ModelLoader struct {
	*datastore.Loader
}

//Get get  {{.Name.Raw}} otuput  by given key.
//You should load value first or use the LoadAndGet method
func (l *{{.Name.Pascal}}ModelLoader) Get(key string) *{{.Name.Pascal}}Model {
	v := l.Store.LoadInterface(key)
	if v == nil {
		return nil
	}
	return v.(*{{.Name.Pascal}}Model)
}

//LoadAndGet load and get  {{.Name.Raw}} otuput  by given key.
func (l *{{.Name.Pascal}}ModelLoader) LoadAndGet(key string) (*{{.Name.Pascal}}Model, error) {
	err := l.Load(key)
	if err != nil {
		return nil, err
	}
	return l.Get(key), nil
}


//{{.Name.Pascal}}ModelDataSource  {{.Name.Raw}} model datasource.
//Datasource can used to create  {{.Name.Raw}} model data store loader by {{.Name.Pascal}}ModelDataSource.NewMapStoreLoader or {{.Name.Pascal}}ModelDataSource.NewSyncMapStoreLoader method.
//Member can use datasource as user data provider by RegisterDataProvider method.
var {{.Name.Pascal}}ModelDataSource = datastore.NewDataSource()

func init() {
	{{.Name.Pascal}}ModelDataSource.Creator = func() interface{} {
		return New{{.Name.Pascal}}Model()
	}
	{{.Name.Pascal}}ModelDataSource.SourceLoader = func(keys ...string) (map[string]interface{}, error) {
		var results = map[string]interface{}{}
		for _, v := range keys {
			model, err := {{.Name.Pascal}}.FindByPrimaryKey(v)
			if err != nil {
				return nil, err
			}
			if model == nil {
				continue
			}
			results[v] = model
		}
		return results, nil
	}
}
