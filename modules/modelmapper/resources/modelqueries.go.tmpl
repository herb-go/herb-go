//{{.Name.Pascal}}Model common querires code.
//WARNING:DO NOT EDIT THIS FILE IF YOU WANT UPDATE CODE WITH CLI TOOl.

package models

//You can import this model with command below:
//import {{.Name.Lower}}models "modules/{{.Module}}/models"

import (
	database "modules/{{.Columns.Database}}"
    "modules/{{.Module}}"
	{{if .Columns.HasTime}}"time"
	{{end }}
	"github.com/herb-go/herb/model/sql/db"
	"github.com/herb-go/herb/model/sql/querybuilder/modelmapper"
	"github.com/herb-go/util"
)

{{- $Name := .Name }}

//{{$Name.Pascal}}TableName table name of model  {{.Name.Raw}}.
const {{$Name.Pascal}}TableName= "{{.Name.Raw}}"

//{{$Name.Pascal}}TableAlias table alias of model  {{.Name.Raw}} which will not changed when table name changed.
const {{$Name.Pascal}}TableAlias="{{.Name.Raw}}"

//{{.Name.Pascal}}Mapper  model mapper struct for  table {{.Name.Raw}}.
type {{.Name.Pascal}}Mapper struct{
   	*modelmapper.ModelMapper
}

//InsertModelWithoutEvent create insert task and bind model for table {{.Name.Raw}} .
//Event BeforeInsert and AfterInsert will not be called.
func (mapper *{{.Name.Pascal}}Mapper) InsertModelWithoutEvent(model *{{.Name.Pascal}}Model,fields ...string) *modelmapper.InsertTask{
	Insert:=mapper.Insert()
	if len(fields)==0{
		fields=Default{{.Name.Pascal}}FieldsInsert
	}
	Insert.Insert.AddFields(model.BuildFields(false,fields...))
    return Insert
}

//InsertModel : create insert task and bind model for table {{.Name.Raw}} 
//Event BeforeInsert and AfterInsert will be called.
func (mapper *{{.Name.Pascal}}Mapper) InsertModel(model *{{.Name.Pascal}}Model,fields ...string) *modelmapper.InsertTask{
	t:=mapper.InsertModelWithoutEvent(model,fields...)
	t.OnPrepare(model.BeforeInsert)
	t.OnSuccess(model.AfterInsert)
	return t
}

{{- if .Columns.HasPrimayKey }}

//UpdateModel : create update task and bind model for table {{.Name.Raw}}.
//Model primary key  will be used for search model
//Event BeforeUpdate and AfterUpdate will be called.
func (mapper *{{.Name.Pascal}}Mapper) UpdateModel(model *{{.Name.Pascal}}Model,fields ...string) *modelmapper.UpdateTask{
	Update:=mapper.UpdateModelWithoutPrimaryKeyAndEvent(model,fields...)
	pk := mapper.ModelPrimaryKey(model)
	Update.Where.Condition=mapper.BuildByPrimaryKeyQuery(pk)
	Update.OnPrepare(model.BeforeUpdate)
	Update.OnSuccess(model.AfterUpdate)
	return Update
}

{{- end }}

//UpdateModelWithoutPrimaryKeyAndEvent  create update task and bind model for table {{.Name.Raw}}.
//Event BeforeUpdate and BeforeUpdate  will not be called.
func (mapper *{{.Name.Pascal}}Mapper) UpdateModelWithoutPrimaryKeyAndEvent(model *{{.Name.Pascal}}Model,fields ...string) *modelmapper.UpdateTask{
	Update:=mapper.Update()
	if len(fields)==0{
		fields=Default{{.Name.Pascal}}FieldsUpdate
	}
	Update.Update.AddFields(model.BuildFields(false,fields...))
	return Update
}

{{- if .Columns.HasPrimayKey }}

//DeleteByPrimaryKeyWithoutEvent  create delete task for table {{.Name.Raw}} with given primary key. 
func (mapper *{{.Name.Pascal}}Mapper) DeleteByPrimaryKeyWithoutEvent(pk {{.Columns.PrimayKeyField}}) *modelmapper.DeleteTask{
	Delete:=mapper.Delete()
	Delete.Where.Condition = mapper.BuildByPrimaryKeyQuery(pk)
	return Delete
}

// DeleteModel create delete task for table {{.Name.Raw}} with given model.
//Event AfterDelete will be called.
func (mapper *{{.Name.Pascal}}Mapper) DeleteModel(model *{{.Name.Pascal}}Model) *modelmapper.DeleteTask {
	pk := mapper.ModelPrimaryKey(model)
	Delete := mapper.DeleteByPrimaryKeyWithoutEvent(pk)
	Delete.OnSuccess(model.AfterDelete)
	return Delete
}

{{- end }}

//SelectModel : create select task and bind model fields for table {{.Name.Raw}} 
func (mapper *{{.Name.Pascal}}Mapper) SelectModel(fields ...string) *modelmapper.SelectTask{
	Select:=mapper.Select()
	model:=New{{.Name.Pascal}}Model()
	if len(fields)==0{
		fields=Default{{.Name.Pascal}}FieldsSelect
	}
	Select.Select.AddFields(model.BuildFields(true,fields...))
	return Select
}

{{- if .Columns.HasPrimayKey }}

//SelectModelByPrimaryKey create by primary key select task and bind model fields for table {{.Name.Raw}}.
func (mapper *{{.Name.Pascal}}Mapper) SelectModelByPrimaryKey(pk {{.Columns.PrimayKeyField}},fields ...string) *modelmapper.SelectTask {
	Select := mapper.SelectModel(fields...)
	Select.Where.Condition = mapper.BuildByPrimaryKeyQuery(pk)
	return Select
}
{{- end }}

//Find find {{.Name.Raw}} model by given task and fields.
//Event AfterFind will be called.
func (mapper *{{.Name.Pascal}}Mapper) Find(Select *modelmapper.SelectTask, fields ...string) (*{{.Name.Pascal}}Model, error) {
	result := New{{.Name.Pascal}}ModelResult(fields...)
	err := Select.FindTo(result)
	if err != nil {
		return nil, err
	}
	return result.Model(), nil
}

{{- if .Columns.HasPrimayKey }}

//FindByPrimaryKey find {{.Name.Raw}} model by given primary key and fields.
//Event AfterFind will be called.
func (mapper *{{.Name.Pascal}}Mapper) FindByPrimaryKey(pk {{.Columns.PrimayKeyField}}, fields ...string) (*{{.Name.Pascal}}Model, error) {
	Select := mapper.SelectModelByPrimaryKey(pk, fields...)
	result := New{{.Name.Pascal}}ModelResult(fields...)
	err := Select.FindTo(result)
	if err != nil {
		return nil, err
	}
	return result.Model(), nil
}

{{- end }}

//FindAll find all {{.Name.Raw}} models by given task and fields.
//Event AfterFind will be called on each model.
func (mapper *{{.Name.Pascal}}Mapper) FindAll(Select *modelmapper.SelectTask, fields ...string) ([]*{{.Name.Pascal}}Model, error) {
	result := New{{.Name.Pascal}}ModelResult(fields...)
	err := Select.FindAllTo(result)
	if err != nil {
		return nil, err
	}
	return result.Models(), nil
}

//{{.Name.Pascal}}  default table {{.Name.Raw}}  mapper instance
var {{.Name.Pascal }} *{{.Name.Pascal }}Mapper

//You  can create transaction with this database.Example:
//func ExampleTx() error {
//	txdb, err := db.NewTxDB({{.Name.Pascal }}Database)
//	if err != nil {
//		panic(err)
//	}
//	{{.Name.Pascal }}Tx := New{{.Name.Pascal }}Mapper(txdb)
//	defer txdb.Rollback()
//  {{.Name.Pascal }}Tx.DoSomething...
//	return txdb.Commit()
//}

// {{.Name.Pascal }}Database database for model mapper {{.Name.Pascal}}.
var {{.Name.Pascal }}Database db.Database


//New{{.Name.Pascal}}Mapper create new  {{.Name.Raw}} model mapper.
func New{{.Name.Pascal}}Mapper(database db.Database) *{{.Name.Pascal}}Mapper {
	var sqltable = db.NewTable(database, {{.Name.Pascal}}TableName)
	sqltable.SetAlias({{.Name.Pascal}}TableAlias)
	return &{{.Name.Pascal}}Mapper{
		ModelMapper: modelmapper.New(sqltable),
	}
}


func init() {
	util.RegisterInitiator({{.Name.Lower}}.ModuleName, "{{.Module}}models", func() {
			{{.Name.Pascal }}Database=database.SQL
			{{.Name.Pascal}} = New{{.Name.Pascal}}Mapper({{.Name.Pascal }}Database)
	})
}