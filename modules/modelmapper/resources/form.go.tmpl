package forms

{{$Name := .Name}}

import (

	"net/http"
     {{- if eq .Columns.FirstPrimayKey.ColumnType "int" }}
    "strconv"
    {{- end }}
    "github.com/herb-go/herb/middleware/router"
	"github.com/herb-go/herb/ui/validator/formdata"
	"github.com/herb-go/util/form/commonform"
	"github.com/herb-go/herb/ui"

    "modules/{{.Module}}/models"
)


//{{.Name.Pascal}}FormFieldLabels : field labels for {{.Name.Pascal}}Form
var {{.Name.Pascal}}FormFieldLabels = map[string]string{
    {{- range .Columns.Columns}}
    {{- if and ( not .AutoValue) ( not .PrimayKey)}}
    "{{.Name}}": "{{.Raw}}",
    {{- end}}
    {{- end}}
    }

//{{.Name.Pascal}}FormModelID form id of form create {{.Name.Raw}}
const {{.Name.Pascal}}FormModelID = "form{{.Name.LowerWithParentDotSeparated}}{{.ID.Lower}}"

//New{{.Name.Pascal}}Form create new  {{.Name.Raw}} form
func New{{.Name.Pascal}}Form() *{{.Name.Pascal}}Form{
	form:=&{{.Name.Pascal}}Form{}
	return form
}

//ComponentID return form component id.
func  (f *{{.Name.Pascal}}Form) ComponentID() string{
    return {{.Name.Pascal}}FormModelID
}

{{- if .Confirmed.WithUser }}
//SetUID  set uid to form
func (f *{{.Name.Pascal}}Form) SetUID(uid string) {
    f.uid = uid
}
{{- end }}

//{{.Name.Pascal}}Form  form for {{.Name.Raw}}  model updating.
type {{.Name.Pascal}}Form struct {
	formdata.Form
    {{ range .Columns.Columns -}}
    {{- if and ( not .AutoValue) ( not .PrimayKey) -}}
    {{.Name}} {{if not .NotNull}}*{{end}}{{.ColumnType}}
    {{ end -}}
    {{- end -}}    
    model *models.{{.Name.Pascal}}Model
    {{- if .Confirmed.WithUser }}
    uid string
    {{- end -}}
}

//Validate  validate {{.Name.Pascal}}Form
func (f *{{.Name.Pascal}}Form) Validate() error {
    {{ range .Columns.Columns -}}
    {{- if and ( not .AutoValue) ( not .PrimayKey) -}}
    {{- if  not .NotNull -}}
    commonform.ValidateRequiredPointer(f, f.{{.Name}}, "{{.Name}}")
    {{else if  eq .ColumnType "string" -}}
    commonform.ValidateRequiredString(f, f.{{.Name}}, "{{.Name}}")
    {{else if eq .ColumnType "int" -}}
    commonform.ValidateRequiredInt(f, f.{{.Name}}, "{{.Name}}")
    {{else if eq .ColumnType "int64" -}}
    commonform.ValidateRequiredInt64(f, f.{{.Name}}, "{{.Name}}")
    {{else if eq .ColumnType "float32" -}}
    commonform.ValidateRequiredFloat32(f, f.{{.Name}}, "{{.Name}}")
    {{else if eq .ColumnType "float64" -}}
    commonform.ValidateRequiredFloat64(f, f.{{.Name}}, "{{.Name}}")
    {{else if eq .ColumnType "time.Time" -}}
    commonform.ValidateRequiredTime(f, f.{{.Name}}, "{{.Name}}")
    {{end}}
    {{- end -}}
    {{- end -}}    
	//if !f.HasError() {
    //     validate code which should be run if no error raised.
	//}
	return nil
}


//InitWithRequest  init {{.Name.Pascal}}Form with request.
func (f *{{.Name.Pascal}}Form) InitWithRequest(r *http.Request) error {

	//Set form labels with translated messages
	f.SetComponentLabels(ui.GetMessages(f.Lang(), "app").Collection({{.Name.Pascal}}FormFieldLabels))

	return nil
}

//SetModel set model to form
func (f *{{.Name.Pascal}}Form) SetModel (model *models.{{.Name.Pascal}}Model)   {
    f.model = model
}


//Exec exec {{.Name.Pascal}}Form on given {{.Name.Pascal}}Model.
func (f *{{.Name.Pascal}}Form) Exec(model *models.{{.Name.Pascal}}Model) error  {
    return  nil
}

//MustGet{{.Name.Pascal}}PrimaryKeyFromRequest : get {{.Name.Pascal}}PrimaryKey from request.
//Panic if any error raised.
func MustGet{{.Name.Pascal}}PrimaryKeyFromRequest(r *http.Request) models.{{.Name.Pascal}}PrimaryKey {
    //Get primary key from request router params.
    var pk models.{{.Name.Pascal}}PrimaryKey
    id:=router.GetParams(r).Get("id")
    if id == "" {
        {{- if not .Columns.FirstPrimayKey.NotNull}}
        return nil
        {{- else }}
        {{- if or (eq .Columns.FirstPrimayKey.ColumnType "int") (eq .Columns.FirstPrimayKey.ColumnType "int64") }}
        return 0
        {{- else }}
        return ""
        {{- end }}
        {{- end}}
    }
    {{ if or (eq .Columns.FirstPrimayKey.ColumnType "int") (eq .Columns.FirstPrimayKey.ColumnType "int64") -}}
    idval,err:=strconv.Atoi(id)
    if err!=nil{
        {{ if not .Columns.FirstPrimayKey.NotNull -}}
        return nil
        {{else -}}
        return 0
        {{- end }}
    }
    pk=models.{{.Name.Pascal}}PrimaryKey({{ if not .Columns.FirstPrimayKey.NotNull }}&{{end}}idval)
    {{else -}}
    pk=models.{{.Name.Pascal}}PrimaryKey({{ if not .Columns.FirstPrimayKey.NotNull }}&{{end}}id)
    {{end -}}
    return pk
}
