package viewmodels

import (
	"modules/{{.LowerWithParent}}/models"
	
	"github.com/herb-go/herb/cache"
	"github.com/herb-go/herb/cache/datastore"
)

//New{{.Pascal}}ViewModelLoaderFactory create new {{.Pascal}}ViewModelLoader factory.
//You should create your loader factory in your model cache module.
var New{{.Pascal}}ViewModelLoaderFactory = func(c cache.Cacheable) func() *{{.Pascal}}ViewModelLoader {
	return func() *{{.Pascal}}ViewModelLoader {
		return &{{.Pascal}}ViewModelLoader{
			Loader: {{.Pascal}}ViewModelDataSource.NewSyncMapStoreLoader(c),
		}
	}
}

//{{.Pascal}}ViewModelLoader {{.Raw}} otuput loader
type {{.Pascal}}ViewModelLoader struct {
	*datastore.Loader
}

//Get get  {{.Raw}} otuput  by given key.
//You should load value first or use the LoadAndGet method
func (l *{{.Pascal}}ViewModelLoader) Get(key string) *{{.Pascal}}ViewModel {
	v := l.Store.LoadInterface(key)
	if v == nil {
		return nil
	}
	return v.(*{{.Pascal}}ViewModel)
}

//LoadAndGet load and get  {{.Raw}} otuput  by given key.
func (l *{{.Pascal}}ViewModelLoader) LoadAndGet(key string) (*{{.Pascal}}ViewModel, error) {
	err := l.Load(key)
	if err != nil {
		return nil, err
	}
	return l.Get(key), nil
}

//{{.Pascal}}ViewModelDataSource  {{.Raw}} viewmodel datasource.
//Datasource can used to create  {{.Raw}} viewmodel data store loader by {{.Pascal}}ViewModelDataSource.NewMapStoreLoader or {{.Pascal}}ViewModelDataSource.NewSyncMapStoreLoader method.
//Member can use datasource as user data provider by RegisterDataProvider method.
var {{.Pascal}}ViewModelDataSource = datastore.NewDataSource()

func init() {
	{{.Pascal}}ViewModelDataSource.Creator = func() interface{} {
		return New{{.Pascal}}ViewModel()
	}
	{{.Pascal}}ViewModelDataSource.SourceLoader = func(keys ...string) (map[string]interface{}, error) {
		var results = map[string]interface{}{}
		for _, v := range keys {
			model, err := models.{{.Pascal}}.FindByPrimaryKey(v)
			if err != nil {
				return nil, err
			}
			if model == nil {
				continue
			}
			viewmodel := New{{.Pascal}}ViewModel()
			err = viewmodel.Convert(model)
			if err != nil {
				return nil, err
			}
			results[v] = viewmodel
		}
		return results, nil
	}
}
