//{{.Name.Pascal}}Model column struct code.
//WARNING:DO NOT EDIT THIS FILE IF YOU WANT UPDATE CODE WITH CLI TOOl.

package models

import (
	{{- if .Columns.HasTime}}
    "time"
    {{end}}
	"github.com/herb-go/herb/model/sql/querybuilder"
	"github.com/herb-go/herb/model/sql/querybuilder/modelmapper"
)
{{$Name := .Name}}
//{{.Name.Pascal}}ModelFields {{.Name.Raw }} model fields struct
type {{.Name.Pascal}}ModelFields struct {
	modelmapper.CommonQueryEvents
	{{- range .Columns.Columns}}
	{{.Name}} {{if not .NotNull }}*{{end}}{{.ColumnType}}
	{{- end}}
}

//BuildFields build  querybuilder.Fields by  given columns.
//Columns will prefixed by alias if withAlias is true.
func (f *{{.Name.Pascal}}ModelFields) BuildFields(withAlias bool, columns ...string) *querybuilder.Fields {
	var field string
	fields := querybuilder.NewFields()
	for k := range columns {
		field = columns[k]
		if withAlias {
			field = {{.Name.Pascal}}.FieldAlias(field)
		}
		switch columns[k] {
		{{- range .Columns.Columns}}
		case {{$Name.Pascal}}Field{{.Name}}:
			fields.Set(field, &f.{{.Name}})
			{{- end}}	
		}
	}
	return fields
}
const(
	{{- range .Columns.Columns}}
	//{{$Name.Pascal}}Field{{.Name}} model column name of field {{.Field}}
	{{$Name.Pascal}}Field{{.Name}} = "{{.Field}}"
	{{- end}}
)

var(
	{{- range .Columns.Columns}}
	//{{$Name.Pascal}}FieldAlias{{.Name}} model column name with table alias of field {{.Field}}
	{{$Name.Pascal}}FieldAlias{{.Name}} = {{$Name.Pascal}}TableAlias+".{{.Field}}"
	{{- end}}
)

{{- if .Columns.HasPrimayKey }}

//{{.Name.Pascal}}PrimaryKey : table {{.Name.Raw}} primary key type
{{- if .Columns.IsSinglePrimayKey }}
type {{.Name.Pascal}}PrimaryKey {{ if not .Columns.FirstPrimayKey.NotNull }}*{{ end }}{{.Columns.FirstPrimayKey.ColumnType}}
{{- else }}
type {{.Name.Pascal}}PrimaryKey struct{
{{- range .Columns.PrimaryKeys}}
    {{.Name}} {{ if not .NotNull }}*{{ end }}{{.ColumnType}}
{{- end}}
}
{{- end}}

//ModelPrimaryKey   get primary key of given  {{.Name.Raw}} model.
func (mapper *{{.Name.Pascal}}Mapper) ModelPrimaryKey( model *{{.Name.Pascal}}Model ) *{{.Name.Pascal}}PrimaryKey {
{{- if .Columns.IsSinglePrimayKey }}
    var pk {{.Name.Pascal}}PrimaryKey
	pk={{.Name.Pascal}}PrimaryKey(model.{{.Columns.FirstPrimayKey.Name}})
	return &pk
{{- else }}
    pk:={{.Name.Pascal}}PrimaryKey{}
{{- range .Columns.PrimaryKeys}}
    pk.{{.Name}} = model.{{.Name}}
{{- end}}
    return &pk
{{- end}}
}


//BuildByPrimaryKeyQuery  build by Primay Key query for table {{.Name.Raw}}
func (mapper *{{.Name.Pascal}}Mapper) BuildByPrimaryKeyQuery(pk {{.Columns.PrimayKeyField}}) *querybuilder.PlainQuery {
    var query= mapper.QueryBuilder()
    var q = query.New("")
{{- if not .Columns.HasPrimayKey }}
    for k,v :=range pk {
       q.And(query.Equal( {{.Name.Pascal}}.FieldAlias(k),v))
    }
{{- else if .Columns.IsSinglePrimayKey }}
    q.And(query.Equal({{.Name.Pascal}}FieldAlias{{.Columns.FirstPrimayKey.Name}},pk))
{{- else }}
{{- range .Columns.PrimaryKeys}}
    q.And(query.Equal({{$Name.Pascal}}FieldAlias{{.Name}},pk.{{.Name}}))
{{- end}}
{{- end}}
	return q
}

//PrimaryKeyFields  primary key fields of table {{.Name.Raw}} 
func (mapper *{{.Name.Pascal}}Mapper) PrimaryKeyFields() []string{
	return []string{
{{- range .Columns.PrimaryKeys}}       
 		{{$Name.Pascal}}Field{{.Name}} ,
{{- end}}
    }
}

{{- end}}