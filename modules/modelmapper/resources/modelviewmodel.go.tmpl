package viewmodels

import (
    "modules/{{.Module}}/models"
)

//New{{.Name.Pascal}}ViewModel create new {{.Name.Pascal}}ViewModel
func New{{.Name.Pascal}}ViewModel() *{{.Name.Pascal}}ViewModel{
     return &{{.Name.Pascal}}ViewModel{}
}

//{{.Name.Pascal}}ViewModel  {{.Name.Raw }} view model struct
type {{.Name.Pascal}}ViewModel struct {
	{{- range .Columns.Columns}}
	{{.Name}} {{if not .NotNull }}*{{end}}{{.ColumnType}}
	{{- end}}
}

//Convert : convert {{.Name.Raw }} model to view model.
//Return any error if raised.
func (o *{{.Name.Pascal}}ViewModel) Convert(model *models.{{.Name.Pascal}}Model) error{
    {{- range .Columns.Columns}}
	o.{{.Name}} = model.{{.Name}}
	{{- end}}
    return nil
}

//MustConvert{{.Name.Pascal}}ViewModel  convert  {{.Name.Raw }} model to  view model .
//Panic if any error raised.
func MustConvert{{.Name.Pascal}}ViewModel(model *models.{{.Name.Pascal}}Model) *{{.Name.Pascal}}ViewModel{
    viewmodel:=New{{.Name.Pascal}}ViewModel()
    err:=viewmodel.Convert(model)
    if err!=nil{
        panic(err)
    }
    return viewmodel
}


//MustConvert{{.Name.Pascal}}ViewModelList  convert  {{.Name.Raw }} model list to  {{.Name.Raw }} view model list.
//Panic if any error raised.
func MustConvert{{.Name.Pascal}}ViewModelList(models []*models.{{.Name.Pascal}}Model) []*{{.Name.Pascal}}ViewModel{
    viewmodels:=make([]*{{.Name.Pascal}}ViewModel,len(models))
    for k,v:=range models{
        viewmodel:=New{{.Name.Pascal}}ViewModel()
        err:=viewmodel.Convert(v)
        if err!=nil{
            panic(err)
        }
        viewmodels[k]=viewmodel
    }
    return viewmodels
}