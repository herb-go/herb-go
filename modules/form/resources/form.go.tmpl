package  forms

import (
    "net/http"

	"github.com/herb-go/herb/ui/validator/formdata"
	"github.com/herb-go/herb/ui"
	"github.com/herb-go/util/form/commonform"

)


//{{.Name.Pascal}}FormFieldLabels form field labels map.
var {{.Name.Pascal}}FormFieldLabels = map[string]string{
	"Field1":  "Field 1",
	"Field2":    "Field 2",
}

//{{.Name.Pascal}}Form form struct for{{.Name.Raw}}
type {{.Name.Pascal}}Form struct {
	formdata.Form
    {{- if .Confirmed.WithUser }}
    uid string
    {{- end }}
	Field1  *string
	Field2    *string

}

//{{.Name.Pascal}}FormID form id of form{{.Name.Raw}}
const {{.Name.Pascal}}FormID = "form{{.LowerWithParentDotSeparated}}"

//New{{.Name.Pascal}}Form create new{{.Name.Raw}} form
func New{{.Name.Pascal}}Form() *{{.Name.Pascal}}Form{
	form:=&{{.Name.Pascal}}Form{}
	return form
}

{{- if .Confirmed.WithUser }}
//SetUID  set uid to form
func (f *{{.Name.Pascal}}Form) SetUID(uid string) {
    f.uid = uid
}
{{- end }}

//ComponentID return form component id.
func (f *{{.Name.Pascal}}Form) ComponentID() string{
    return {{.Name.Pascal}}FormID 
}


//Validate Validate form and return any error if raised.
func (f *{{.Name.Pascal}}Form) Validate() error {
	commonform.ValidateRequiredPointer(f, f.Field1, "Field1")
    commonform.ValidateRequiredPointer(f, f.Field2, "Field2")
	if !f.HasError() {
	}
	return nil
}

//Exec execwhen form validated.
func (f *{{.Name.Pascal}}Form) Exec()  error {
	return nil
}

//InitWithRequest init {{.Name.Raw}} form  with http request.
func (f *{{.Name.Pascal}}Form) InitWithRequest(r *http.Request) error {
	//Put your request form code here.
	//such as get current user id or ip address.

	//Set form labels with translated messages
	f.SetComponentLabels(ui.GetMessages(f.Lang(), "app").Collection({{.Name.Pascal}}FormFieldLabels))
	return nil
}