package forms

import (
	"modules/{{.Name.LowerWithParentPath}}"
	"net/http"
	"strings"
	{{- if not (eq .AccountKeyword "") }}
	"github.com/herb-go/herb/user"
	{{- end}}
	"github.com/herb-go/herb/ui/userinput/formdata"
	"github.com/herb-go/herb/ui"
	"github.com/herb-go/util/form/commonform"
	"github.com/herb-go/util/form/memberform"
)

{{ if not (eq .AccountKeyword "" )}}
//AccountKeyword account keyword used to login.
const AccountKeyword = "{{.AccountKeyword}}"
{{- end }}

//{{.FormID.Pascal}}FormFieldLabels form field labels map.
var {{.FormID.Pascal}}FormFieldLabels = map[string]string{
	"Username": "Username",
	"Password": "Password",
}

//{{.FormID.Pascal}}Form form struct for login
type {{.FormID.Pascal}}Form struct {
	formdata.Form
	Username string
	Password string
	language string
	uid      string
}

//{{.FormID.Pascal}}FormID form id of  login form
const {{.FormID.Pascal}}FormID = "form{{.Name.Lower}}.{{.FormID.Lower}}"

//New{{.FormID.Pascal}}Form create new login form
func New{{.FormID.Pascal}}Form() *{{.FormID.Pascal}}Form {
	form := &{{.FormID.Pascal}}Form{}
	form.SetModelID({{.FormID.Pascal}}FormID)
	return form
}

//UID return form uid
func (f *{{.FormID.Pascal}}Form) UID() string {
	return f.uid
}

//ValidateUserStatus validate user status
func (f *{{.FormID.Pascal}}Form) ValidateUserStatus() error {
	m := {{.Name.Lower}}.Member.NewMembers()
	s, err := m.LoadStatus(f.uid)
	if err != nil {
		return err
	}
	status := s.Get(f.uid)
	f.ValidateFieldfString(status != nil, "Username", memberform.MsgIncorrectUsernameOrPassword.Translated(f.language))
	if f.HasError() {
		return nil
	}
	f.ValidateFieldfString(status.IsAvaliable(), "Username", memberform.MsgUserNotAvailable.Translated(f.language))
	return nil
}

//GetUserID get user id from username field
//Return user id and any error if raised
{{- if eq .AccountKeyword "" }}
func (f *{{.FormID.Pascal}}Form) GetUserID() (string, error) {
	f.uid = f.Username
	return f.uid, nil
}
{{- else }}
func (f *{{.FormID.Pascal}}Form) GetUserID() (string, error) {
	account := user.NewAccount()
	account.Keyword = AccountKeyword
	account.Account = f.Username
	uid, err := members.Member.Accounts().AccountToUID(account)
	if err != nil {
		return "", err
	}
	f.uid = uid
	return f.uid, nil
}
{{- end}}

//Validate Validate form and return any error if raised.
func (f *{{.FormID.Pascal}}Form) Validate() error {
	var uid string
	var err error

	 {{- if .Caseinsensitive }}
	f.Username = strings.ToLower(f.Username)
	{{- end }}
	f.Username = strings.TrimSpace(f.Username)
	f.ValidateFieldfString(f.Username != "", "Username", commonform.MsgRequired.Translated(f.language)) 
    f.ValidateFieldfString(f.Password != "", "Password", commonform.MsgRequired.Translated(f.language)) 
	if !f.HasError() {
		uid, err = f.GetUserID()
		if err != nil {
			return err
		}
		f.ValidateFieldfString(uid != "", "Username", memberform.MsgUserNotAvailable.Translated(f.language))
	}
	if !f.HasError() {
		err = f.ValidateUserStatus()
		if err != nil {
			return err
		}
	}	
	if !f.HasError() {
		result, err := {{.Name.Lower}}.Member.Password().VerifyPassword(uid, f.Password)
		if err != nil {
			return err
		}
		f.ValidateFieldfString(result == true, "Username",memberform.MsgUserNotAvailable.Translated(f.language))
	}
	return nil
}

//InitWithRequest init  login form  with http request.
func (f *{{.FormID.Pascal}}Form) InitWithRequest(r *http.Request) error {
	//Put your request form code here.
	//such as get current user id or ip address.

	//Set form labels with translated messages
	f.SetFieldLabelsCollection(ui.GetMessages(f.language, "herbgo.member").Collection(({{.FormID.Pascal}}FormFieldLabels)))

	return nil
}
