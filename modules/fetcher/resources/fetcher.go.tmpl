package app

import (
	"sync/atomic"

	"github.com/herb-go/fetcher"
	"github.com/herb-go/util"
	"github.com/herb-go/util/config"
	"github.com/herb-go/util/config/tomlconfig"
	"github.com/herb-go/herbconfig/source"
)


//{{.PascalWithParents}} config instance of {{.Raw}}.
var {{.PascalWithParents}} = &fetcher.Server{}


var sync{{.PascalWithParents}} atomic.Value

//Store{{.PascalWithParents}} atomically store {{.Raw}} config
func (a *appSync) Store{{.PascalWithParents}}(c *fetcher.Server) {
	sync{{.PascalWithParents}}.Store(c)
}

//Load{{.PascalWithParents}}  atomically load {{.Raw}} config
func (a *appSync) Load{{.PascalWithParents}} () *fetcher.Server {
	v := sync{{.PascalWithParents}}.Load()
	if v == nil {
		return nil
	}
	return v.(*fetcher.Server)
}


func init() {
	//Register loader which will be execute when Config.LoadAll func be called.
	//You can put your init code after load.
	//You must panic if any error rasied when init.
	config.RegisterLoader(util.ConfigFile("/{{.LowerWithParentDotSeparated}}.toml"),func(configpath source.Source) {
		util.Must(tomlconfig.Load(configpath, {{.PascalWithParents}}))
		Sync.Store{{.PascalWithParents}}({{.PascalWithParents}})
	})
}
